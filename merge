#!/bin/bash

command_v() {
    command -v "$1" >/dev/null 2>/dev/null
}

add_app() {
    if ! command_v "$1"; then
        apps="$apps $@"
    fi
}

install_tools() {
    if [ -n "$apps" ]; then
        export DEBIAN_FRONTEND=noninteractive
        $SUDO apt-get -qq update &&
        $SUDO apt-get -qq install --no-install-recommends -y $apps >/dev/null 2>/dev/null
        echo "Installed: $apps" >&2
        apps=
    fi
}

install_gh() {
    if [ "$(id -u)" != 0 ]; then
        SUDO=sudo
    fi
    add_app curl
    install_tools
    if command_v apt-get &&
        ! apt-cache policy gh |
            grep -q Candidate:; then
        curl -f -s -S -L https://cli.github.com/packages/githubcli-archive-keyring.gpg |
        $SUDO dd of=/usr/share/keyrings/githubcli-archive-keyring.gpg 2> /dev/null
        $SUDO chmod go+r /usr/share/keyrings/githubcli-archive-keyring.gpg
        echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/githubcli-archive-keyring.gpg] https://cli.github.com/packages stable main" |
        $SUDO tee /etc/apt/sources.list.d/github-cli.list > /dev/null
    fi
    add_app gh
    install_tools
}

report_failure() {
    echo "MERGE_FAILED=1" >> "$GITHUB_ENV"
    echo 'status=failed' >> "$GITHUB_OUTPUT"
    echo "message=$1" >> "$GITHUB_OUTPUT"
    if [ -z "$INPUT_DO_NOT_REPORT" ]; then
        echo "::error ::$1"
        if [ -f "$GITHUB_STEP_SUMMARY" ]; then
            echo "# checkout-merge failed

:x: $1" >> "$GITHUB_STEP_SUMMARY"
        fi
    fi
    exit 0
}

command_v gh || install_gh

cd "$INPUT_PATH" || report_failure "Could not change to input_path ($INPUT_PATH)"
SENDER=$(jq -r .sender.login "$GITHUB_EVENT_PATH")
USER_JSON=$(mktemp)
(
    gh api "/users/$SENDER" ||
    curl -s "$GITHUB_API_URL/users/$SENDER" ||
    echo '{"id": 0, "login": "unknown"}'
) > "$USER_JSON"
export GIT_AUTHOR_NAME=$(jq -r .name "$USER_JSON")
export GIT_AUTHOR_EMAIL=$(jq -r '.email // empty' "$USER_JSON")
if [ -z "$GIT_AUTHOR_NAME" ]; then
    GIT_AUTHOR_NAME="$GITHUB_ACTOR"
fi
if [ -z "$GIT_AUTHOR_EMAIL" ]; then
    GIT_AUTHOR_EMAIL=$(jq -r '.pusher.email // empty' "$GITHUB_EVENT_PATH")
    if [ -z "$GIT_AUTHOR_EMAIL" ]; then
        GIT_AUTHOR_EMAIL=$(jq -r '((.id|tostring + "+") + .login + "@users.noreply.github.com")' "$USER_JSON")
    fi
fi
export GIT_COMMITTER_NAME=GitHub
export GIT_COMMITTER_EMAIL=noreply@github.com
if [ "$(git rev-parse --is-shallow-repository)" = 'true' ]; then
    UNSHALLOW=--unshallow
fi
git fetch $UNSHALLOW origin "$INPUT_BASE_REF" ||
    report_failure "Can't get history for base_ref ($INPUT_BASE_REF). Please contact support for $GITHUB_ACTION_REPOSITORY"
GITHUB_BASE_SHA=$(git rev-parse FETCH_HEAD)

git -c advice.detachedHead=false checkout "$GITHUB_BASE_SHA" || {
    git status
    report_failure "Couldn't check out base_ref ($INPUT_BASE_REF); repository is probably dirty."
}

git fetch origin "$INPUT_HEAD_REF" ||
    report_failure "Can't get head_ref ($INPUT_HEAD_REF). Please contact support for $GITHUB_ACTION_REPOSITORY"

GITHUB_HEAD_SHA=$(git rev-parse FETCH_HEAD)
git merge -m "Merge $GITHUB_HEAD_SHA into $GITHUB_BASE_SHA" FETCH_HEAD ||
    report_failure "Can't generate merge; there's probably a conflict. Resolve it to get workflow feedback."

echo 'status=success' >> "$GITHUB_OUTPUT"
